<?php

namespace Acme\BudgetTrackerBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ExpenseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ExpenseRepository extends EntityRepository
{
    public function findExpensesForDate($user, $date)
    {
        $q = $this
            ->createQueryBuilder('e')
            ->where('e.date = :date')
            ->andWhere('e.user = :user')
            ->setParameter('date', $date)
            ->setParameter('user', $user)
             ->getQuery();
        
        return $q->getResult();
    }

    public function findExpensesForMonthAndCat($user, $month, $category)
    {
        $q = $this
            ->createQueryBuilder('e')
            ->where('e.date LIKE :month')
            ->andWhere('e.user = :user')
            ->andWhere('e.category = :category')
            ->setParameter('month', "%$month")
            ->setParameter('user', $user)
            ->setParameter('category', $category)
             ->getQuery();
        
        return $q->getResult();
    } 
    
    public function findExpensesForMonth($user, $month)
    {
        $q = $this
            ->createQueryBuilder('e')
            ->where('e.date LIKE :month')
            ->andWhere('e.user = :user')
            ->orderBy('e.category', 'ASC')
            ->setParameter('month', "%$month")
            ->setParameter('user', $user)
             ->getQuery();
        
        return $q->getResult();
    } 
    
    public function getSumByMonthAndUser($month, $user)
    {
        $q = $this->createQueryBuilder('e')
            ->add('select', 'SUM(e.price)')
            ->where('e.date LIKE :month')
            ->andWhere('e.user = :user')
            ->setParameter('month', "%$month")
            ->setParameter('user', $user)
            ->getQuery();

        return $q->getSingleScalarResult();

    }
    
    public function findBetweenDates($user, $date1, $date2)
    {
        $q = $this
            ->createQueryBuilder('e')
            ->where('e.date >= :date1')
            ->andWhere('e.user = :user')
            ->andWhere('e.date <= :date2')
            ->setParameter('date1', $date1)
            ->setParameter('date2', $date2)
            ->setParameter('user', $user)
             ->getQuery();
        
        return $q->getResult();
    }


}